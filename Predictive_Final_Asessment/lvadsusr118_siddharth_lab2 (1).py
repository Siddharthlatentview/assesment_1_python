# -*- coding: utf-8 -*-
"""LVADSUSR118_Siddharth_lab2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VxxHO5lf5YUUqDC1lUp1Va7VxWfm5AE7
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score, precision_score, recall_score,r2_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline
from scipy import stats
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('auto-mpg.csv')

print(df.describe())

print(df.info())

df.head()

df.info()

print(df.isnull().sum())

categorical_columns = df.select_dtypes(include=['object']).columns
numerical_columns = df.select_dtypes(include=['float64', 'int64']).columns
imputer = SimpleImputer(strategy='mean')
df[numerical_columns] = imputer.fit_transform(df[numerical_columns])

for col in categorical_columns:
    mode = df[col].mode()[0]
    df[col].fillna(mode, inplace=True)

print(df.isnull().sum())

correlation_matrix = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Plot for Feature Selection')
plt.show()

df.drop_duplicates(inplace=True)

sns.boxplot(df)

# Remove outliers using Z-score
z_scores = np.abs(stats.zscore(df[numerical_columns]))
threshold = 3
df = df[(z_scores < threshold).all(axis=1)]

df.drop(columns=['car name'])

label_encoders = {}
for col in categorical_columns:
    le = LabelEncoder()
    df[col] = le.fit_transform(df[col])
    label_encoders[col] = le

# Split data into features and target
X = df.drop(columns=['mpg'])
y = df['mpg']

# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a linear regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

r = r2_score(y_pred,y_test)
print("\nModel Evaluation:")
print("R2 score:", r)