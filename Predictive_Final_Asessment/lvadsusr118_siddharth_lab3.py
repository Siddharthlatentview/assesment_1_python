# -*- coding: utf-8 -*-
"""LVADSUSR118_Siddharth_lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17AoVSqUb076CO_WnuZje-8-OFlCVERQ0
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.metrics import silhouette_score
from scipy.stats import zscore
import seaborn as sns

data = pd.read_csv("seeds.csv")

data.head()

print(data.describe())

print(data.info())

print(data.info())

print(data.isnull().sum())

numerical_columns = [col for col in data.columns if data[col].dtype != 'object']
imputer_num = SimpleImputer(strategy='mean')

data[numerical_columns] = imputer_num.fit_transform(data[numerical_columns])

data.drop_duplicates(inplace=True)

sns.boxplot(data)

Q1 = data[numerical_columns].quantile(0.25)
Q3 = data[numerical_columns].quantile(0.75)
IQR = Q3 - Q1
data = data[~((data[numerical_columns] < (Q1 - 1.5 * IQR)) | (data[numerical_columns] > (Q3 + 1.5 * IQR))).any(axis=1)]

scaler = StandardScaler()
scaled_numerical = scaler.fit_transform(data[numerical_columns])
df = pd.DataFrame(scaled_numerical, columns=numerical_columns)

# correlation heatmap
correlation_matrix = df.corr()
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Plot for Feature Selection')
plt.show()

# Creating elbow chart to select k for KMeans
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(df)
    inertia.append(kmeans.inertia_)

plt.figure(figsize=(10, 6))
plt.plot(range(1, 11), inertia, marker='o')
plt.title('Elbow Method for Optimal k')
plt.xlabel('Number of clusters')
plt.ylabel('Inertia')
plt.show()

optimal_k = 3  # Based on elbow chart
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
data['Cluster'] = kmeans.fit_predict(df)

print("Silhouette Score is\n")
print(silhouette_score(df,kmeans.fit_predict(df)))
# Scatter plot for clusters
pca = PCA(n_components=2)
pca_components = pca.fit_transform(df)

plt.figure(figsize=(10, 6))
sns.scatterplot(x=pca_components[:, 0], y=pca_components[:, 1], hue=data['Cluster'], palette='Set1', legend='full')
plt.title('Scatter Plot for Clusters')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()