# -*- coding: utf-8 -*-
"""LVADSUSR118_siddharth_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11BaoLUSmJ9T5aVgSEY8mkvBm3xUa8_UT
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import LabelEncoder

import pandas as pd


df=pd.read_csv('winequality-red.csv')
df.head()

df.info()

df.describe()

print(df.isnull().sum)

# Imputing the missing values:

df['fixed acidity'].fillna(df['fixed acidity'].mean(), inplace = True)
df['volatile acidity'].fillna(df['volatile acidity'].mean(), inplace = True)
df['citric acid'].fillna(df['citric acid'].mean(), inplace = True)
df['residual sugar'].fillna(df['residual sugar'].mean(), inplace = True)
df['chlorides'].fillna(df['chlorides'].mean(), inplace = True)
df['free sulfur dioxide'].fillna(df['free sulfur dioxide'].mean(), inplace = True)
df['alcohol'].fillna(df['alcohol'].mean(), inplace = True)
df['sulphates'].fillna(df['sulphates'].mean(), inplace = True)
df['quality'].fillna(df['quality'].mean(), inplace = True)

df.info()

import pandas as pd


def transform_quality(value):
    if value in range(3, 7):
        return 0
    elif value in range(7, 9):
        return 1
    else:
        return value

df['quality'] = df['quality'].apply(transform_quality)

df.dropna()

print(df['quality'])

sns.boxplot(df)

from scipy import stats

numeric_cols = df.select_dtypes(include=[np.number]).columns
z_scores = stats.zscore(df[numeric_cols])
threshold = 3
df = df[(np.abs(z_scores) < threshold).all(axis=1)]

# Splitting data into features and target variable
X = df.drop('quality', axis=1)
y = df['quality']

# Splitting the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Applying Classification Algorithm (Random Forest as an example)
classifier = RandomForestClassifier()
classifier.fit(X_train, y_train)

# Predicting on the test set
y_pred = classifier.predict(X_test)

# Calculating accuracy
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)

print("\nAccuracy:", accuracy)
print("Precision:", precision)
print("Recall:", recall)





