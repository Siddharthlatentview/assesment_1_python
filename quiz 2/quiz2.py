# -*- coding: utf-8 -*-
"""quiz2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tUaDgunWJSLodEIPn_jvvc6AN00ZPD9e
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load data
train_data = pd.read_csv("DSAILVA-TRAIN Data - Wheat.csv")
test_data = pd.read_csv("DSAILVA-TEST Data - Wheat.csv")

# Selecting features
X_train = train_data[['Length of kernel', 'Width of kernel']].values
X_test = test_data[['Length of kernel', 'Width of kernel']].values

# Feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Elbow Method to find optimal K
inertia = []
for k in range(1, 11):
    kmeans = KMeans(n_clusters=k, random_state=42)
    kmeans.fit(X_train_scaled)
    inertia.append(kmeans.inertia_)

# Plotting Elbow Method
plt.plot(range(1, 11), inertia, marker='o')
plt.xlabel('Number of clusters (K)')
plt.ylabel('Inertia')
plt.title('Elbow Method')
plt.show()

# Selecting optimal K based on the plot
optimal_k = 3  # Based on elbow point

# Training the model with optimal K
kmeans = KMeans(n_clusters=optimal_k, random_state=42)
kmeans.fit(X_train_scaled)

# Predicting clusters for test data
test_data['Cluster'] = kmeans.predict(X_test_scaled)

# Plotting clusters
plt.figure(figsize=(8, 6))
for cluster in range(optimal_k):
    cluster_data = test_data[test_data['Cluster'] == cluster]
    plt.scatter(cluster_data['Length of kernel'], cluster_data['Width of kernel'], label=f'Cluster {cluster}')
plt.xlabel('Length of kernel')
plt.ylabel('Width of kernel')
plt.title('Clusters of Wheat Varieties (Test Data)')
plt.legend()
plt.show()

# Saving model outcome to a file
model_outcome = test_data[['Length of kernel', 'Width of kernel', 'Cluster']]
model_outcome.to_csv('model_outcome.csv', index=False)

print("Model outcome has been saved successfully.")